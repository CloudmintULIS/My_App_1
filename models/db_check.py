# print_db_tables.py
import psycopg2
import os
from dotenv import load_dotenv

load_dotenv()  # load DATABASE_URL t·ª´ file .env n·∫øu c√≥


def get_db_connection():
    """
    K·∫øt n·ªëi PostgreSQL t·ª´ URL.
    """
    DATABASE_URL = os.getenv("DATABASE_URL")
    if not DATABASE_URL:
        raise Exception("B·∫°n c·∫ßn set bi·∫øn m√¥i tr∆∞·ªùng DATABASE_URL ho·∫∑c file .env!")

    conn = psycopg2.connect(DATABASE_URL)
    return conn


def print_table_data(conn, table_name):
    cur = conn.cursor()

    # L·∫•y danh s√°ch c·ªôt
    cur.execute(f"""
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = %s
        ORDER BY ordinal_position;
    """, (table_name,))
    columns = [col[0] for col in cur.fetchall()]

    # L·∫•y to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng
    cur.execute(f"SELECT * FROM {table_name};")
    rows = cur.fetchall()

    print(f"\nüìå B·∫£ng: {table_name}")
    print("   C√°c c·ªôt:", columns)
    if rows:
        for row in rows:
            record = dict(zip(columns, row))
            print("   ‚ûù", record)
    else:
        print("   (B·∫£ng tr·ªëng)")

    cur.close()


# ========================
# MAIN
# ========================
if __name__ == "__main__":
    conn = get_db_connection()
    cur = conn.cursor()

    # L·∫•y t·∫•t c·∫£ c√°c b·∫£ng trong schema public
    cur.execute("""
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema='public'
        ORDER BY table_name;
    """)
    tables = [t[0] for t in cur.fetchall()]
    cur.close()

    print("üìÇ Danh s√°ch b·∫£ng:", tables)

    # In d·ªØ li·ªáu t·ª´ng b·∫£ng (full)
    for table in tables:
        print_table_data(conn, table)

    conn.close()
